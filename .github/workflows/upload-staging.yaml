name: Upload to staging

# This workflow takes an existing artiface from the "Test Site Build"
# workflow, extracts the contents, and uploads them to the staging bucket.

# TODO: once this is done; make a copy for production.
# Change the workflow that triggers; change the bucket

on:
  workflow_run:
    workflows: ["Build from PR"]
    types:
      - completed
  #workflow_call:  # for debugging

jobs:
  stage-from-artifact:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      statuses: write
    steps:
      - name: Download metadata
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: "metadata"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get metadata
        id: get-metadata
        run: |
          echo "PR_NUM=$(jq -r .pr metadata.json)" >> $GITHUB_ENV
          echo "PR_HEADSHA=$(jq -r .sha metadata.json)" >> $GITHUB_ENV
        
      - uses: myrotvorets/set-commit-status-action@v2.0.1
        with:
          status: pending
          sha: ${{ env.PR_HEADSHA }}
          context: 'Upload to staging'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install s3cmd
        run: |
          python -m pip install s3cmd
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: "site-build"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-2
          role-to-assume: ${{ secrets.STAGING_ROLE }}

      - name: Extract artifact and sync with s3
        # 1. Use `aws s3 sync` to copy existing production files to staging
        # 2. Use `s3cmd sync`, which checks by md5, to update changed files
        run: |
          aws s3 sync s3://{{ secrets.PROD_BUCKET }}/* s3://{{ secrets.STAGING_BUCKET }}/$PR_NUM/
          tar -xvf site.tgz
          TARGET = s3://${{ secrets.STAGING_BUCKET }}/$PR_NUM/
          echo "Syncing to $TARGET"
          s3cmd sync ./_site/ $TARGET

      - uses: myrotvorets/set-commit-status-action@v2.0.1
        if: ${{ always() }}
        env:
          DEPLOY_SUCCESS: Successfully staged preview.
          DEPLOY_FAILURE: Failed to stage preview.
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status == 'success' && 'success' || 'failure' }}
          sha: ${{ env.PR_HEADSHA }}
          context: 'Upload to staging'
          description: ${{ job.status == 'success' && env.DEPLOY_SUCCESS || env.DEPLOY_FAILURE }}

      # TODO: possible comment with link (if comment hasn't already been made?)
      # see marocchino/sticky-pull-request-comment
