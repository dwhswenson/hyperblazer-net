name: Upload to staging

# This workflow takes an existing artiface from the "Test Site Build"
# workflow, extracts the contents, and uploads them to the staging bucket.

# TODO: once this is done; make a copy for production.
# Change the workflow that triggers; change the bucket

on:
  workflow_run:
    workflows: ["Build from PR"]
    types:
      - completed
  #workflow_call:  # for debugging

jobs:
  stage-from-artifact:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: LouisBrunner/checks-action@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Upload to staging
          status: in_progress
      - name: Install s3cmd
        run: |
          python -m pip install s3cmd
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: "site-build"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-2
          role-to-assume: ${{ secrets.STAGING_ROLE }}
      - name: Extract artifact and sync with s3
        env:
          PR_REF: ${{ github.event.number }}
        # 1. Use `aws s3 sync` to copy existing production files to staging
        # 2. Use `s3cmd sync`, which checks by md5, to update changed files
        run: |
          echo "PR_REF=$PR_REF"
          PR_NUM=$(echo $PR_REF | cut -d'/' -f 3)
          echo "PR=$PR_NUM"
          aws s3 sync s3://{{ secrets.PROD_BUCKET }}/* s3://{{ secrets.STAGING_BUCKET }}/$PR_NUM/
          tar -xvf site.tgz
          s3cmd sync ./_site/ s3://${{ secrets.STAGING_BUCKET }}/$PR_NUM/
      # TODO: possible comment with link (if comment hasn't already been made?)
      - uses: LouisBrunner/checks-action@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Upload to staging
          status: completed
          conclusion: success

  cleanup-artifact:
    if: ${{ always() }}
    needs: stage-from-artifact
    runs-on: ubuntu-latest
    steps:
      - uses: philips-labs/action-delete-artifacts@v1.0.0
        with:
          run_id: ${{ github.event.workflow_run.id }}
          name: "site-build"
          workflow_conclusion: "success"
