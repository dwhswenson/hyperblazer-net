name: Upload to staging

on:
  workflow_run:
    workflows: ["Build from PR"]
    types:
      - completed
  #workflow_call:  # for debugging

jobs:
  stage-from-artifact:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      statuses: write

    steps:
      - name: Get metadata
        #uses: ./.github/actions/get-metadata
        uses: dwhswenson/static-site-workflows/actions/get-metadata@main
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: "metadata"
          github-token: ${{ secrets.GITHUB_TOKEN }}
        
      - uses: myrotvorets/set-commit-status-action@v2.0.1
        with:
          status: pending
          sha: ${{ env.PR_HEADSHA }}
          context: 'Upload to staging'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install s3cmd
        run: |
          python -m pip install s3cmd
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          run-id: ${{ github.event.workflow_run.id }}
          name: "site-build"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-2
          role-to-assume: ${{ secrets.STAGING_ROLE }}

      - name: Save target prefix to environment
        run: |
          TARGET="s3://${{ secrets.STAGING_BUCKET }}/$PR_NUM/"
          echo "TARGET=$TARGET" >> $GITHUB_ENV

      - name: Identify whether the PR is already staged
        run: |
          count=$(aws s3 ls $TARGET | wc -l)
          if [ $count > 1 ]; then
            echo "Staging already exists"
            echo EXISTS=0 >> $GITHUB_ENV
          else
            echo "Staging does not exist"
            echo EXISTS=1 >> $GITHUB_ENV
          fi

      - name: Extract artifact
        run: |
          tar -xf site.tgz

      # if we haven't staged before, just use aws s3 sync -- the smart stuff
      # s3cmd sync tries to do can actually make it slower
      - name: Sync to s3
        run: |
          if [ $EXISTS -eq 0 ]; then
            aws s3 sync ./_site/ $TARGET
          else
            s3cmd sync ./_site/ $TARGET
          fi

      - name: Clean up CSS content type metadata
        run: |
          aws s3 cp s3://${{ secrets.STAGING_BUCKET }}/$PR_NUM/ s3://${{ secrets.STAGING_BUCKET }}/$PR_NUM/assets/ --recursive --exclude "*" --include "*.css" --metadata-directive REPLACE --content-type "text/css"

      - name: Perform cache invalidation
        run: |
          echo "Invalidating staging cache"
          aws cloudfront create-invalidation --distribution-id ${{ secrets.STAGING_CLOUDFRONT }} --paths "/*"

      # we need metadata for later workflows (staging comment)
      - name: Reupload metadata
        uses: actions/upload-artifact@v4
        with:
          name: metadata
          path: metadata.json
          if-no-files-found: error
          retention-days: 1

      - uses: myrotvorets/set-commit-status-action@v2.0.1
        if: ${{ always() }}
        env:
          DEPLOY_SUCCESS: Successfully staged preview.
          DEPLOY_FAILURE: Failed to stage preview.
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status == 'success' && 'success' || 'failure' }}
          sha: ${{ env.PR_HEADSHA }}
          context: 'Upload to staging'
          description: ${{ job.status == 'success' && env.DEPLOY_SUCCESS || env.DEPLOY_FAILURE }}
